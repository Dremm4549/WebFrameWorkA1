{"ast":null,"code":"import _slicedToArray from\"E:/SET Year 3/Sem2/AdvancedWebFrameworks/Assignmnents/mDremo5093_A1/testtwo/mdremo5093_a1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import Button from'./Button';import RedditData from'./RedditData';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Header=function Header(_ref){var title=_ref.title;var _useState=useState(''),_useState2=_slicedToArray(_useState,2),subRedditName=_useState2[0],setSubRedditName=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),inputName=_useState4[0],setInputName=_useState4[1];var _useState5=useState(function(){var storedLikedRedditPosts=JSON.parse(localStorage.getItem('likedRedditPostIds'))||[];return storedLikedRedditPosts;}),_useState6=_slicedToArray(_useState5,2),likedRedditPosts=_useState6[0],setLikedRedditPosts=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),ShowFetchPage=_useState8[0],setFetchPage=_useState8[1];var click=function click(){setSubRedditName(inputName);};var change=function change(event){setInputName(event.target.value);};var changePage=function changePage(){setFetchPage(!ShowFetchPage);setInputName('');setSubRedditName('');};var addToLikedPosts=function addToLikedPosts(post){setLikedRedditPosts(function(prevLikedRedditPosts){var newLikedRedditPosts=prevLikedRedditPosts.concat(post);localStorage.setItem('likedRedditPostIds',JSON.stringify(newLikedRedditPosts));return newLikedRedditPosts;});};var removeLikedPost=function removeLikedPost(postId){setLikedRedditPosts(function(prevLikedRedditPosts){return prevLikedRedditPosts.filter(function(post){return post.id!==postId;});});localStorage.setItem(\"likedRedditPostIds\",JSON.stringify(likedRedditPosts.filter(function(post){return post.id!==postId;}).map(function(post){return post.id;})));};return/*#__PURE__*/_jsx(\"div\",{children:ShowFetchPage?/*#__PURE__*/_jsxs(\"div\",{className:\"header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"Header-Content\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"Title-Header\",children:title}),/*#__PURE__*/_jsx(\"input\",{onChange:change,type:\"text\",className:\"Search-Box\",placeholder:\"Enter a subreddit\",value:inputName}),/*#__PURE__*/_jsx(Button,{classN:'Search-Button',text:\"Retrieve top 10 posts\",colour:\"red\",onClick:click}),/*#__PURE__*/_jsx(Button,{classN:'Liked-Posts-Button',text:\"Show liked Posts\",colour:\"white\",onClick:changePage})]}),/*#__PURE__*/_jsx(\"div\",{className:\"Reddit-Content\",children:subRedditName&&/*#__PURE__*/_jsx(RedditData,{subRedditName:subRedditName,addToLikedPosts:addToLikedPosts,likedRedditPosts:likedRedditPosts})})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Button,{className:\"Liked-Posts-Button\",text:\"Fetch More Reddit Posts\",colour:\"white\",onClick:changePage}),/*#__PURE__*/_jsx(\"div\",{className:\"Reddit-Content\",children:likedRedditPosts.map(function(post){return/*#__PURE__*/_jsxs(\"div\",{className:\"reddit-liked-post\",children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Post Name: \",post.title]}),likedRedditPosts.thumbnail!=='self'?/*#__PURE__*/_jsx(\"img\",{src:post.thumbnail,alt:likedRedditPosts.title}):/*#__PURE__*/_jsx(\"p\",{children:post.selftext}),/*#__PURE__*/_jsx(\"button\",{className:\"Remove-Liked-Post\",onClick:function onClick(){return removeLikedPost(post.id);},children:\"Remove from Liked\"})]},post.id);})})]})});};Header.defaultProps={title:'Reddit Hotness Grabber'};export default Header;","map":{"version":3,"names":["React","useState","Button","RedditData","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Header","_ref","title","_useState","_useState2","_slicedToArray","subRedditName","setSubRedditName","_useState3","_useState4","inputName","setInputName","_useState5","storedLikedRedditPosts","JSON","parse","localStorage","getItem","_useState6","likedRedditPosts","setLikedRedditPosts","_useState7","_useState8","ShowFetchPage","setFetchPage","click","change","event","target","value","changePage","addToLikedPosts","post","prevLikedRedditPosts","newLikedRedditPosts","concat","setItem","stringify","removeLikedPost","postId","filter","id","map","children","className","onChange","type","placeholder","classN","text","colour","onClick","thumbnail","src","alt","selftext","defaultProps"],"sources":["E:/SET Year 3/Sem2/AdvancedWebFrameworks/Assignmnents/mDremo5093_A1/testtwo/mdremo5093_a1/src/components/Header.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Button from './Button'\r\nimport RedditData from './RedditData';\r\n\r\nconst Header = ({title}) => {\r\n    const [subRedditName, setSubRedditName] = useState('');\r\n    const [inputName, setInputName] = useState('');\r\n    \r\n    const [likedRedditPosts, setLikedRedditPosts] = useState(() => {\r\n        const storedLikedRedditPosts = JSON.parse(localStorage.getItem('likedRedditPostIds')) || [];\r\n        return storedLikedRedditPosts;\r\n      });\r\n      \r\n    \r\n    const [ShowFetchPage, setFetchPage] = useState(true);\r\n    \r\n    const click = () =>{\r\n        setSubRedditName(inputName)\r\n    }\r\n\r\n    const change = event => {\r\n        setInputName(event.target.value)\r\n    }\r\n\r\n    const changePage = () => {\r\n        setFetchPage(!ShowFetchPage);\r\n        setInputName('');\r\n        setSubRedditName('');\r\n    }\r\n\r\n    const addToLikedPosts = (post) => {\r\n        setLikedRedditPosts((prevLikedRedditPosts) => {\r\n            const newLikedRedditPosts = prevLikedRedditPosts.concat(post);\r\n            localStorage.setItem('likedRedditPostIds', JSON.stringify(newLikedRedditPosts));\r\n            return newLikedRedditPosts;\r\n          });\r\n      };\r\n      \r\n      const removeLikedPost = (postId) => {\r\n\r\n        setLikedRedditPosts((prevLikedRedditPosts) =>\r\n          prevLikedRedditPosts.filter((post) => post.id !== postId)       \r\n        );\r\n\r\n        localStorage.setItem(\r\n            \"likedRedditPostIds\",\r\n            JSON.stringify(\r\n              likedRedditPosts.filter((post) => post.id !== postId).map((post) => post.id)\r\n            )\r\n        );\r\n      };\r\n\r\n    return(\r\n        <div>\r\n            {ShowFetchPage ? (\r\n                <div className='header'> \r\n                <div className='Header-Content'>\r\n                    <h1 className='Title-Header'>{title}</h1>           \r\n                    <input \r\n                    onChange={change}\r\n                    type=\"text\" \r\n                    className='Search-Box' \r\n                    placeholder='Enter a subreddit'\r\n                    value={inputName}\r\n                    />\r\n                    <Button classN={'Search-Button'} text={\"Retrieve top 10 posts\"} colour={\"red\"} onClick={click}/>\r\n                    <Button classN={'Liked-Posts-Button'} text={\"Show liked Posts\"} colour={\"white\"} onClick={changePage}/>\r\n                </div>\r\n                    <div className='Reddit-Content'>\r\n                        {subRedditName && <RedditData subRedditName={subRedditName} addToLikedPosts={addToLikedPosts} likedRedditPosts={likedRedditPosts}/>}\r\n                    </div>\r\n            </div>\r\n            ) : (\r\n                <>\r\n                     <Button className='Liked-Posts-Button'text={\"Fetch More Reddit Posts\"} colour={\"white\"} onClick={changePage}/>\r\n                     <div className='Reddit-Content'>\r\n                        {likedRedditPosts.map((post) => (\r\n                            <div key={post.id} className='reddit-liked-post'>\r\n                                <h3>Post Name: {post.title}</h3>\r\n\r\n                                {likedRedditPosts.thumbnail !== 'self' ? (\r\n                                <img src={post.thumbnail} alt={likedRedditPosts.title}></img>\r\n                                ): (\r\n                                    <p>{post.selftext}</p>\r\n                                )}\r\n\r\n                                <button className='Remove-Liked-Post' onClick={() => removeLikedPost(post.id)}>Remove from Liked</button>\r\n                            </div>\r\n                        ))}\r\n                        \r\n                            {/* // <div key={likedRedditPosts.id} className='reddit-post'>\r\n                            //     <h3>Post Name: {likedRedditPosts.title}</h3>\r\n                            //     <p>Post ID: {likedRedditPosts.id}</p>\r\n                                {likedRedditPosts.thumbnail !== 'self' ? (\r\n                                <img src={likedRedditPosts.thumbnail} alt={likedRedditPosts.title}></img>\r\n                                ): (\r\n                                    <p>{likedRedditPosts.selftext}</p>\r\n                                )}\r\n                            //     <button className='Remove-Liked-Post' onClick={removeLikedPost}>Remove from Liked</button>                      \r\n                            // </div> */}\r\n                        \r\n                     </div>\r\n                </>\r\n            )}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nHeader.defaultProps={\r\n    title: 'Reddit Hotness Grabber'\r\n}\r\nexport default Header;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}